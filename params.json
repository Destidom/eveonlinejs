{"name":"Eveonlinejs","tagline":"Node.js/io.js EVE API Client","body":"# eveonline.js [![](https://secure.travis-ci.org/MichaelErmer/eveonlinejs.png)](http://travis-ci.org/#!/MichaelErmer/eveonlinejs)\r\n\r\n**An asynchronous EVE Online API client for Node.js** \r\n\r\n- no function mapping\r\n- direct access\r\n- asynchronous\r\n- caching\r\n\r\n**This is a continued version of https://github.com/kuja/hamster**\r\n\r\n### Installation\r\n\r\n```\r\nnpm install eveonlinejs\r\n```\r\n\r\n### Examples\r\n\r\n```javascript\r\nvar eveonlinejs = require('eveonlinejs')\r\n\r\n// Print a list of skill groups\r\neveonlinejs.fetch('eve:SkillTree', function (err, result) {\r\n  if (err) throw err\r\n\r\n  for (var groupID in result.skillGroups) {\r\n    console.log(result.skillGroups[groupID].groupName)\r\n  }\r\n})\r\n\r\n// Set default parameters (useful for setting keyID and vCode)\r\neveonlinejs.setParams({\r\n  keyID: '1234567',\r\n  vCode: 'some random vcode'\r\n})\r\n\r\n// Default parameters will get merged with the parameters passed into fetch().\r\n// The actual request will include all three parameters: keyID, vCode and characterID\r\neveonlinejs.fetch('char:AccountBalance', {characterID: 12345}, function (err, result) {\r\n  if (err) throw err\r\n  // do stuff\r\n})\r\n```\r\n\r\n\r\n### Client object\r\n\r\nThe `eveonlinejs` object is multi-purpose in that it is both a namespace container and an instance of `eveonlinejs.Client`. Client objects individually maintain their own cache state and server details. If you do not want to use the default `eveonlinejs` object, feel free to construct your own client objects as you see fit.\r\n\r\n```javascript\r\nvar eveonlinejs = require('eveonlinejs')\r\n  , client = new eveonlinejs.Client({url: url, cache: cache})\r\n\r\nclient.fetch('...', function (err, result) {\r\n  // ...\r\n})\r\n```\r\n\r\n\r\n### Caching\r\n\r\n* Easily extendible\r\n* Asynchronous store/read\r\n* Ships with `eveonlinejs.cache.FileCache` and `eveonlinejs.cache.MemoryCache`\r\n* Defaults to `eveonlinejs.cache.MemoryCache` (it is highly recommended you switch to FileCache)\r\n\r\n```javascript\r\nvar eveonlinejs = require('eveonlinejs')\r\n\r\neveonlinejs.setCache(new eveonlinejs.cache.FileCache({path: '...'}))\r\n```\r\n\r\n### Tests\r\n\r\neveonline.js is mostly tested, but not completely. Any contributions, especially to tests are greatly appreciated.\r\n\r\nRun tests with (requires mocha):\r\n```\r\nnpm test\r\n```\r\n\r\n### License\r\n\r\nHamser is licensed under the MIT license:\r\n```\r\nCopyright (c) 2012 Matt Harris\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\r\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\r\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\r\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial\r\nportions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\r\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\r\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}